generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(nanoid())

  email    String @unique
  password String

  name    String @default("No Name")
  picture String @default("/uploads/no-user-image.png")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  stores  Store[]
  reviews Review[]

  orders    Order[]
  favorites Product[]

  @@map("users")
}

model Store {
  id String @id @default(cuid())

  title       String
  description String?

  products   Product[]
  categories Category[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt() @map("updated_at")
  Review     Review[]
  orderItems OrderItem[]
  colors     Color[]

  @@map("stores")
}

model Product {
  id String @id @default(cuid())

  title       String
  description String?
  price       Int
  images      String[]

  reviews Review[]

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  color   Color?  @relation(fields: [colorId], references: [id])
  colorId String? @map("color_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  orderItems OrderItem[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("products")
}

model Category {
  id String @id @default(cuid())

  products Product[]

  title       String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  store     Store[]

  @@map("categories")
}

model Color {
  id String @id @default(cuid())

  products Product[]
  name     String
  value    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  stores    Store[]

  @@map("colors")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  text   String
  rating Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("reviews")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items  OrderItem[]
  total  Int
  user   User?       @relation(fields: [userId], references: [id])
  userId String?     @map("user_id")

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  quantity Int
  price    Int
  total    Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @map("store_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
